##
## Copyright (C) 2015-2018 Lightbend Inc. <https://www.lightbend.com>
##
package $service.packageName

import javax.xml.namespace.QName
import javax.xml.ws.handler.{MessageContext, Handler}
#if ($markGenerated == "true")
import javax.annotation.Generated
#end

#foreach ($import in $service.imports)
import ${import}
#end
/**
* This class was generated by $fullversion
* $currentdate
* Generated source version: $version
*
*/
#if ($markGenerated == "true")
@Generated(value = "$generatorclass", date = "$currentdate", comments = "$fullversion")
#end
@javax.inject.Singleton
class ${service.name} @javax.inject.Inject() (apacheCxfBus: play.soap.ApacheCxfBus, configuration: play.api.Configuration) extends play.soap.PlaySoapClient(apacheCxfBus, configuration) {
#foreach ($port in $service.ports)

  #set($portClassName = ${port.interfaceClass})
  #if ($portClassName == ${service.name})
    #set($portClassName = ${port.fullClassName})
  #end
  #set($portMethodName = $portMethod.transform($port))

  #if ($markGenerated == "true")
  @Generated(value = "$generatorclass", date = "$currentdate")
  #end
  lazy val $portMethod.transform($port): $portClassName = {
    createPort[$portClassName](new QName("$service.namespace"), "$port.portName", "$port.bindingAdress")
  }

  #if ($markGenerated == "true")
  @Generated(value = "$generatorclass", date = "$currentdate")
  #end
  def $portMethod.transform($port)(handlers: Handler[_ <: MessageContext]*): $portClassName = {
    createPort[$portClassName](new QName("$service.namespace"), "$port.portName", "$port.bindingAdress", handlers: _*)
  }

  #if ($markGenerated == "true")
  @Generated(value = "$generatorclass", date = "$currentdate")
  #end
  @annotation.varargs
  def ${port.methodName}(handlers: Handler[_ <: MessageContext]*): $portClassName = ${portMethodName}(handlers: _*)
#end
}
